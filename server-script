Script started on Tue 08 May 2018 03:31:40 PM EDT
vyong@cisc450:~/cisc450/proj2$ cat test2.txt
In this project, you will implement a client and a server
which use TCP to transmit a file from the server to the client.
Both the client and the server will run on the course VM
{\em cisc450.cis.udel.edu},
but they should be written in such a way that they could
conceivably be run on any two hosts, not necessarily the same.
For convenience, both the hostname and the server
port number may be hardcoded into both client and server,
but this should be done in such a way that they should
be easy to change.

The server starts by waiting for a connection request from the client. %printin

The client starts by prompting the user to enter 
%the hostname and port number for the server. 
%It then prompts the user to enter
the name of the file to be transferred. The client then sends a connection
request to the server.  After the connection is established, the client sends a
filename to the server. The server reads the file and sends it to the client in
a series of packets as described below. The client receives the file and stores
it with the name {\em out.txt}.
When the file transfer is complete, both the client 
A
B
C
DEF

G
H
and the server terminate execution.

The format of a data packet is shown in the figure below:

\begin{verbatim}
    <----------------- 16 bits (2 bytes) ------------------>
    --------------------------------------------------------
    |                Packet Sequence Number                |
    --------------------------------------------------------
    |              Count (no. of data bytes)               |
    --------------------------------------------------------
    |            Data Bytes      |          ...            |
    --------------------------------------------------------
\end{verbatim}

Each data packet contains a 4-byte long header followed by a number of data
characters.  The header contains  2 fields, each of length 16 bits (2 bytes) as
shown in the figure above. You must convert the values in these fields
into the network byte order when they are transmitted, and convert them back to
convert them back to host byte order when they are received.


The first field of the header is called the packet sequence number. Each packet
transmitted  by the  server is  assigned a sequence number  starting with 1 and
incremented by 1 for each packet.  The second field of the header is a count of
data characters in the packet. This value must be in the range 0 through 80. If
the count is 0, then there are no data
characters in the packet.
vyong@cisc450:~/cisc450/proj2$ ./udpserver 5
Timeout: 0.100000 seconds
Waiting for incoming messages on port 46970

The file name is test2.txt
Packet 0 transmitted with 58 data bytes
ACK 0 Received
Packet 1 transmitted with 64 data bytes
ACK 1 Received
Packet 0 transmitted with 57 data bytes
ACK 0 Received
Packet 1 transmitted with 28 data bytes
ACK 1 Received
Packet 0 transmitted with 57 data bytes
ACK 0 Received
Packet 1 transmitted with 63 data bytes
ACK 1 Received
Packet 0 transmitted with 50 data bytes
ACK 0 Received
Packet 1 transmitted with 58 data bytes
ACK 1 Received
Packet 0 transmitted with 55 data bytes
ACK 0 Received
Packet 1 transmitted with 19 data bytes
ACK 1 Received
Packet 0 transmitted with 1 data bytes
ACK 0 Received
Packet 1 transmitted with 79 data bytes
ACK 1 Received
Packet 0 transmitted with 1 data bytes
ACK 0 Received
Packet 1 transmitted with 1 data bytes
ACK 1 Received
Packet 0 transmitted with 50 data bytes
ACK 0 Received
Packet 1 transmitted with 47 data bytes
ACK 1 Received
Packet 0 transmitted with 35 data bytes
ACK 0 Received
Packet 1 transmitted with 75 data bytes
ACK 1 Received
Packet 0 transmitted with 79 data bytes
ACK 0 Received
Packet 1 transmitted with 1 data bytes
ACK 1 Received
Packet 0 transmitted with 79 data bytes
ACK 0 Received
Packet 1 transmitted with 1 data bytes
ACK 1 Received
Packet 0 transmitted with 79 data bytes
ACK 0 Received
Packet 1 transmitted with 1 data bytes
ACK 1 Received
Packet 0 transmitted with 32 data bytes
ACK 0 Received
Packet 1 transmitted with 53 data bytes
ACK 1 Received
Packet 0 transmitted with 2 data bytes
ACK 0 Received
Packet 1 transmitted with 2 data bytes
ACK 1 Received
Packet 0 transmitted with 2 data bytes
ACK 0 Received
Packet 1 transmitted with 4 data bytes
ACK 1 Received
Packet 0 transmitted with 1 data bytes
ACK 0 Received
Packet 1 transmitted with 2 data bytes
ACK 1 Received
Packet 0 transmitted with 2 data bytes
ACK 0 Received
Packet 1 transmitted with 36 data bytes
ACK 1 Received
Packet 0 transmitted with 1 data bytes
ACK 0 Received
Packet 1 transmitted with 58 data bytes
ACK 1 Received
Packet 0 transmitted with 1 data bytes
ACK 0 Received
Packet 1 transmitted with 17 data bytes
ACK 1 Received
Packet 0 transmitted with 61 data bytes
ACK 0 Received
Packet 1 transmitted with 61 data bytes
ACK 1 Received
Packet 0 transmitted with 61 data bytes
ACK 0 Received
Packet 1 transmitted with 61 data bytes
ACK 1 Received
Packet 0 transmitted with 61 data bytes
ACK 0 Received
Packet 1 transmitted with 61 data bytes
ACK 1 Received
Packet 0 transmitted with 61 data bytes
ACK 0 Received
Packet 1 transmitted with 61 data bytes
ACK 1 Received
Packet 0 transmitted with 15 data bytes
ACK 0 Received
Packet 1 transmitted with 1 data bytes
ACK 1 Received
Packet 0 transmitted with 76 data bytes
ACK 0 Received
Packet 1 transmitted with 79 data bytes
ACK 1 Received
Packet 0 transmitted with 1 data bytes
ACK 0 Received
Packet 1 transmitted with 71 data bytes
ACK 1 Received
Packet 0 transmitted with 79 data bytes
ACK 0 Received
Packet 1 transmitted with 1 data bytes
ACK 1 Received
Packet 0 transmitted with 61 data bytes
ACK 0 Received
Packet 1 transmitted with 1 data bytes
ACK 1 Received
Packet 0 transmitted with 1 data bytes
ACK 0 Received
Packet 1 transmitted with 79 data bytes
ACK 1 Received
Packet 0 transmitted with 1 data bytes
ACK 0 Received
Packet 1 transmitted with 79 data bytes
ACK 1 Received
Packet 0 transmitted with 1 data bytes
ACK 0 Received
Packet 1 transmitted with 79 data bytes
ACK 1 Received
Packet 0 transmitted with 1 data bytes
ACK 0 Received
Packet 1 transmitted with 79 data bytes
ACK 1 Received
Packet 0 transmitted with 1 data bytes
ACK 0 Received
Packet 1 transmitted with 39 data bytes
ACK 1 Received
Packet 0 transmitted with 26 data bytes
ACK 0 Received
End of Transmission Packet with sequence number 1 transmitted with 0 data bytes
Number of data packets transmitted (initial transmission only): 67
Total number of data bytes transmitted: 2577
Total number of retransmissions: 0
Total number of data packets transmitted (initial transmissions plus retransmissions): 67
Number of ACKs Received: 67
Number of Timeouts: 0
vyong@cisc450:~/cisc450/proj2$ exit
exit

Script done on Tue 08 May 2018 03:32:33 PM EDT
